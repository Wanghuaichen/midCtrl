package devices

import (
	"fmt"
	"log"
	"strconv"
	"time"
)

//01 03 00 00 00 06 c5 c8  发
//收  01 03 04 03 16 00 F5 DB F4  03 16 为ph7.90  00 F5 为24.5度
//电表侧 01 03 04 02 1A 00 F5 1A 0B    为ph5.38  24.5度
//污水相关检测数据处理
//he default baud rate is 9600. The data format is 8 bits, no parity, 1 stop bit.
//这个协议很不明确
//使用ascii 校验码怎么产生？ LRC校验？    共17个字节
//使用RTU  ph四位精度0.001  温度只有一位没有小数精度？  共11字节
var wuShuiPeriod = 60 * time.Second

func wuShuiStart(id uint) {
	conn := getConn(id)
	if conn == nil {
		return
	}
	defer func() {
		conn.Close() //关闭连接
		log.Printf("污水监测处理发生错误\n")
		unBindConn(id)
		//设置设备状态
	}()
	cmd := []byte{0x01, 0x03, 0x00, 0x00, 0x00, 0x06, 0xc5, 0xc8} //获取污水命令
	rCh := make(chan []byte)
	wCh := make(chan []byte)
	timeout := time.NewTimer(wuShuiPeriod * 2)
	var temperature int
	var ph int
	stataCh := make(chan bool, 1)
	go sendCmd(conn, wCh, stataCh)
	go readOneData(conn, rCh, []byte{0x01, 0x03, 0x04}, 3+4+2, stataCh)
	for {
		var dat []byte
		var state bool
		wCh <- cmd
		timeout.Reset(wuShuiPeriod * 2)
		select {
		case dat = <-rCh:
			break
		case state = <-stataCh:
			if false == state {
				return
			}
		case <-timeout.C:
			log.Printf("污水读数据超时重新发送读取数据\n")
			continue
		}
		if !checkModbusCRC16(dat) {
			log.Printf("污水数据校验失败：%s\n", dat)
			continue
		}
		ph = int(int(dat[3])*0x100+int(dat[4])) * 100
		temperature = int(int(dat[5])*0x100+int(dat[6])) * 1000
		serData := map[string][]string{"ph": {strconv.FormatInt(int64(ph), 10)}, "temperature": {strconv.FormatInt(int64(temperature), 10)}, "alarm": {"0"}}
		fmt.Printf("污水发送：%v\n", serData)
		sendData("污水", id, serData)
		time.Sleep(wuShuiPeriod + time.Duration(time.Now().Unix()%10))
	}
}

/* func readWS() {
	for {
		for _, id := range devTypeTable["污水"] {
			//构造要发送的数据，计算CRC
			data := []byte{0x01, 0x03, 0x00, 0x00, 0x00, 0x06, 0xc5, 0xc8}
			buff, err := reqDevData(id, data, nil, checkModbusCRC16)
			if err != nil {
				continue
			}
			fmt.Printf("污水请求到数据：%v\n", data)
			var temperature int
			var ph int
			//var alarm int
			ph = int(int(buff[3])*0x100+int(buff[4])) * 100
			temperature = int(int(buff[5])*0x100+int(buff[6])) * 1000
			//alarm = int(buff[8])

			//Data = (Y1*256 + Y2) * (unit = 0.01)
			//wuShui := buff[3:14]
			//sendServ([]byte(generateDataJsonStr(id, "污水", string(wuShui))))

			jsonData := map[string][]string{"ph": {strconv.FormatInt(int64(ph), 10)}, "temperature": {strconv.FormatInt(int64(temperature), 10)}, "alarm": {"0"}}
			fmt.Printf("污水发送：%v\n", jsonData)
			sendData("污水", id, jsonData)
		}
		time.Sleep(wuShuiPeriod)
	}

}
*/
/* CRC 高位字节值表 */
var auchCRCHi = [...]byte{
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40}

/* CRC低位字节值表*/
var auchCRCLo = [...]byte{
	0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
	0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
	0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
	0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
	0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
	0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
	0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
	0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
	0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
	0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
	0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
	0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
	0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
	0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
	0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
	0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
	0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
	0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
	0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
	0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
	0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
	0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
	0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
	0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
	0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
	0x43, 0x83, 0x41, 0x81, 0x80, 0x40}

func tableCRC16(data []byte) (low byte, high byte) {
	uchCRCHi := uint8(0xFF) /* 高CRC字节初始化 */
	uchCRCLo := uint8(0xFF) /* 低CRC 字节初始化 */
	crcIndex := uint8(0)    /* CRC循环中的索引 */

	for _, v := range data {
		crcIndex = uchCRCHi ^ uint8(v) /* 计算CRC */
		uchCRCHi = uchCRCLo ^ auchCRCHi[crcIndex]
		uchCRCLo = auchCRCLo[crcIndex]
	}
	low = uchCRCLo
	high = uchCRCHi
	return
}

func tableCheckCRC(data []byte) bool {
	len := len(data)
	if len < 2 {
		return false
	}
	l, h := tableCRC16(data[:len-2])
	if l == data[len-2] && h == data[len-1] {
		return true
	}
	return false
}

// dianBiaoAddCRC 把数据后两位改为CRC校验码
func wuShuiAddCRC(data []byte) []byte {
	len := len(data)
	l, h := tableCRC16(data[:len-2])
	data[len-2] = l
	data[len-1] = h
	return data
}

// LRC 校验
/*
Uint8 dsp_lrc_check(Uint8 buf[], Uint16 len)
{
 Uint16 iCount  = 0;
 Uint8 lrcValue = 0x00;

 for(iCount = 0; iCount < len ; iCount ++) {

   lrcValue = lrcValue + buf[iCount];

  }

// return ((unsigned char)((~lrcValue) + 1));      //两种操作都能实现
 return ((unsigned char)(-((char)lrcValue)));

}
*/
func modbusLRC(data []byte) (low, high byte) {
	return 0, 0
}
